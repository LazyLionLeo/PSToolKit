
# Text styling

css
	"@font-face"
		font-family=pen
		src="url('blokletters/balpen.ttf')"

	.wt-note
		padding="1em"
		flex=1
		min-width="250px"
		p
			margin="0.5em"
		> div
			> p:first-child
				margin-top=0
			> p:last-child
				margin-bottom=0
		ul, ol
			display=flex
			flex-direction=column
			padding-inline-start="20px"
		

	.wt-screen
		display=flex
		flex-wrap=wrap
	
	.wt-header
		margin="0"
		display="flex"
		gap="4px"
		padding="4px"
		font-weight="bold"
		z-index="2"
		border-width="0 0 2px 0 !important"

		> .wt-title
			margin="0"
			flex="1"

	.wt-title
		font-size="125%"
		font-weight="bold"

	a, a:visited, a:focus, a:active
		color="#44a"
		text-decoration="none"

	img
		max-width="100%"

	*
		box-sizing=border-box

	.wt-device *
		font-family=pen
		



### Menu

css .wt-menu-bar
	display="flex"
	gap="8px"
	padding="4px 8px"
	margin="-8px -8px 0 -8px"
	border-bottom="2px solid black"
	color="#22c"

	> .wt-category
		position="relative"

	> .wt-category > .wt-options
		color=black
		display="none"
		position="absolute"
		padding="4px"
		flex-direction="column"
		gap="4px"
		border="2px solid black"
		background-color=white
		box-shadow="0 2px 4px rgba(0,0,0,0.3)"

	> .wt-category:hover > .wt-options
		display="flex"

define MenuBar(content)
	.wt-menu-bar
		run {setHandDrawnBorders(this)}
		{content}
		
define MenuCategory(category,content?)
	.wt-category
		.wt-title {category}
		.wt-options
			run {setHandDrawnBorders(this)}
			if {content}
				{content}
			else
				.wt-empty-page "Not designed yet.."



### Buttons

css
	a, a:active, a:focus, a:visited, a:hover
		color="#22c"
	
	.no-target
		color="black !important"

	.wt-button
		padding="4px"
		display="flex"
		gap="4px"
		border-radius="4px"
		font-weight="bold"
		justify-content="center"
		align-items="center"

		> div
			flex="1"
			text-align="center"

	".wt-button:not(.no-target)"
		border-color="#22c !important"

	.wt-action-button
		position="absolute"
		right="12px"
		bottom="12px"
		padding="12px"
		border="2px solid #22c"
		color="#22c"
		font-weight="bold"
		border-radius="50% 60% 40% 55%"
		display="flex"
		justify-content="center"
		align-items="center"
		box-shadow="0 4px 8px rgba(0,0,0,0.5)"

define Button(icon?,link?,content?)
	a href={link ? "#screen_"+link : "javascript:void(0)"} class="wt-hd dashed wt-button{link ? '' : ' no-target'}"
		run {setHandDrawnBorders(this)}
		if {icon}
			RemixIcon icon={icon} size=16
		{content}

define ActionButton(link,content)
	a.wt-action-button href={"#screen_" + link}
		{content} # test



### Icons

css
	.wt-remix
		font-size="150%"

	.wt-icon
		cursor="pointer"

	.wt-thumbnail
		background-color="#666"
		color="white"
		border-radius="4px"

# We're loading this font from the web as opposed to from our assets, as it
# seems impossible to have the browser cache an asset.
link href="https://cdn.jsdelivr.net/npm/remixicon@2.5.0/fonts/remixicon.css" rel="stylesheet"

define RemixIcon(icon,size?,extraClass?)
	i class="ri-{icon}-line wt-remix" style={size ? "width: "+size+"px; height: "+size+"px; font-size: "+size+"px;" : ""}

define Icon(icon,link)
	a.wt-icon href={"#screen_" + link}
		RemixIcon icon={icon}

define Thumbnail(src,size=32)
	if {src.indexOf('/')>=0 || src.indexOf('.')>=0}
		.wt-thumbnail style="background: center / cover url({src}); width: {size}px; height: {size}px;"
	else
		RemixIcon icon={src} size={size} extraClass=thumbnail



### Layouting

css
	.wt-empty-page
		flex="1"
		display="flex"
		justify-content="center"
		align-items="center"
		font-style="italic"

	.wt-scrollable
		display="flex"
		flex-direction="column"
		gap="8px"
		padding="8px"
		flex="1"
		overflow="auto"

		.wt-scrollable
			padding="0"
			overflow="visible"

		> hr
			margin="0"
			border-top="1px solid #ccc"

	.wt-scrollable.bottom
		justify-content="end"

	.wt-columns
		display="flex"
		gap="8px"

		> *
			flex="1"



### Hand-drawn box

run {{{
	// Deterministic randomness.
	let seed = 6;
	window.setRandomSeed = function(str) {
		seed = 0;
		for (i = 0; i < str.length; i++) {
			seed = 0 | (((seed << 5) - seed) + str.charCodeAt(i));
		}
	};

    function randomInt(options) {
      var t = seed += 0x6D2B79F5;
      t = Math.imul(t ^ t >>> 15, t | 1);
      t ^= t + Math.imul(t ^ t >>> 7, t | 61);
      return ((t ^ t >>> 14) >>> 0) % options;
	}

	window.setHandDrawnBorders = function(element) {
		let style = '';
		let alt = randomInt(2);
		for(let corner of ['top-left', 'top-right', 'bottom-right', 'bottom-left']) {
			let bend = 3 + randomInt(5);
			let length = 33 + randomInt(68);
			if (++alt & 1) {
				style += `border-${corner}-radius: ${bend}px 50%;`;
			}
			else {
				style += `border-${corner}-radius: 50% ${bend}px;`;
			}
		}
		element.style = style;
	}
}}}

define HandDrawnBox(content, class_?, ...rest)
	div class="wt-hd{class_ ? ' '+class_ : ''}" ...{rest}
		run {setHandDrawnBorders(this)}
		{content}

css
	.wt-hd
		border="solid 2px #41403E"

	.wt-hd.thick
		border="solid 3px #41403E"

	.wt-hd.dashed
		border="dashed 2px #41403E"


### Tabs

css .wt-tabs
	display="flex"
	gap="8px"
	> .wt-tab
		border-radius="8px"
		padding="4px"
		display="flex"
		gap="4"
		cursor="pointer"

		> .wt-template
			display="none"

	"> .wt-tab.selected"
		font-weight=bold
		border-style=solid
	"> .wt-tab:not(.selected)"
		border-color="#22c !important"
		color="#22c"




define Tabs(content, position="top")
	if {position == "bottom"}
		.wt-scrollable.bottom
	.wt-tabs
		{content}
	if {position != "bottom"}
		.wt-scrollable.top
	
	run {{{
		let tabE = this.querySelector(':scope > .wt-tabs > .wt-tab.selected');
		if (tabE) {
			this.querySelector(':scope > .wt-scrollable').innerHTML = tabE.querySelector(':scope > .wt-template').innerHTML;
		}
	}}}


define Tab(content={undefined},title,selected={false})
	HandDrawnBox class="wt-tab dashed {selected ? ' selected' : ''}" onclick={{{
		return function(event) {
			let tabsE = this.parentNode.parentNode;
			tabsE.querySelector(':scope > .wt-scrollable').innerHTML = this.querySelector(':scope > .wt-template').innerHTML;
			for (let tabE of tabsE.querySelector(':scope > .wt-tabs').children) {
				tabE.classList.remove('selected');
			}
			this.classList.add('selected');
		}
	}}}
		{title}
		.wt-template
			if {content===undefined}
				.wt-empty-page "Not designed yet.."
			else
				{content}



### Forms

css
	label.wt
		display="flex"
		flex-direction="column"
		gap="4px"

	label.wt.checkbox, label.wt.radio
		flex-direction="row"

	label.wt > p
		margin="0"
		font-weight="bold"
		font-size="85%"
		margin-bottom="2px"

	label.wt.checkbox > p, label.wt.radio > p
		flex="1"

	input.wt, textarea.wt, select.wt
		padding="4px"
		margin="0"
		resize="none"
		outline="none"
		background-color=transparent
		accent-color="#444"


	fieldset.wt
		margin="0"
		padding="8px"
		border="1px solid #ccc"

define Input(label,type="text",value?)
	label.wt class={type}
		if {label}
			p {label}
		input.wt value={value} type={type}
			run {setHandDrawnBorders(this)}
		
		
define TextArea(label,value?)
	label.wt.textarea
		if {label}
			p {label}
		textarea.wt
			run {setHandDrawnBorders(this)}
			{value}


define CheckBox(label,checked?,name?)
	label.wt.checkbox
		input.wt type=checkbox checked={!!checked}
			run {setHandDrawnBorders(this)}
		p {label}


define RadioButton(name,label,checked?)
	label.wt.radio
		input.wt type=radio name={name} checked={!!checked}
		p {label}


define Select(label, content?, options?, sep="|")
	label.wt.select
		p {label}
		select.wt
			run {setHandDrawnBorders(this)}
			if {content}
				{content}
			if {options}
				for option in {options.split(sep)}
					option
						{option.trim()}

define FieldSet(content, legend?)
	fieldset.wt
		if {legend}
			legend.wt {legend}
		{content}



### Lists

css ul.wt
	flex="1"
	display="flex"
	flex-direction="column"
	gap="4px"
	padding="0"
	margin="0"

	> li
		display="flex"
		gap="4px"
		align-items="flex-start"

		> div
			display="flex"
			flex-direction="column"
			gap="2px"

			> p
				margin="0"
				font-size="85%"

			> p:first-child
				font-weight="bold"
				font-size="100%"

	> li + li
		border-top="1px solid #ccc"
		padding-top="2px"
		margin-top="-2px"

define List(content)
	ul.wt {content}

define ListItem(text,subtext?,thumbnail?,link?,thumbnail_size=32)
	li
		if {thumbnail}
			Thumbnail src={thumbnail} size={thumbnail_size}
		div
			p
				if {link}
					a href={"#screen_" + link} {text}
				else
					{text}
			if {subtext}
				p.subtext {subtext}



### Phone

css .wt-phone
	background-color="white"
	width="320px"
	min-width="320px"
	height="600px"
	box-shadow="0 4px 8px rgba(0,0,0,0.5)"
	border-radius="8px"
	display="flex"
	flex-direction="column"
	position="relative"

	> .wt-panel
		position="absolute"
		top="64px"
		left=0
		bottom=0
		padding="8px"
		background-color=white
		font-weight="bold"
		min-width="35%"
		z-index="1"
		display="flex"
		flex-direction="column"
		gap="8px"
		opacity="1"
		transition="left 0.5s, opacity 0.5s"
		box-shadow="5px 0 20px black"

	> .wt-panel.hidden
		left="-35%"
		opacity="0"


define Phone(id, content, title?, bar_left?, bar_right?, up?, panel?, notes?)
	run {setRandomSeed(id)}
	.wt-screen
		HandDrawnBox class="wt-phone wt-device thick" id="screen_{id}"
			if {panel}
				.wt-panel.hidden
					run {setHandDrawnBorders(this)}
					{panel}
			if {title || bar_left || bar_right}
				HandDrawnBox class=wt-header
					.wt-left
						if {up}
							Icon link={up} icon="chevron-left"
						if {panel}
							a.wt-icon onclick={{{